datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  phase        Phase[]
  batch        Batch[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Batch {
  id    String @id @default(uuid())
  title String
  status String?
  enrollmentDate String?
  isPublished Boolean @default(false)
  
  live Live[]
  application Applications[]

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@fulltext([title])
}

model Live {
  id          String  @id @default(uuid())
  title       String
  isPublished Boolean @default(false)

  url    String
  timing String

  batchId String
  batch   Batch  @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@index([batchId])
  @@fulltext([title])
}

model Phase {
  id          String  @id @default(uuid())
  title       String  @db.Text
  description String? @db.Text

  isPublished Boolean @default(false)
  position    Int
  timeLimit   Int

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  modules Module[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@fulltext([title])
}

model Module {
  id          String  @id @default(uuid())
  title       String  @db.Text
  isPublished Boolean @default(false)
  position    Int

  phaseId String
  phase   Phase  @relation(fields: [phaseId], references: [id], onDelete: Cascade)

  chapters Chapter[]

  attachments Attachments[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([phaseId])
  @@fulltext([title])
}

model Attachments {
  id  String @id @default(uuid())
  url String

  Module   Module? @relation(fields: [moduleId], references: [id])
  moduleId String?

  @@index([moduleId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)
  position    Int

  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  videos       Video[]
  quizs        Quiz[]
  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([moduleId])
}

model Video {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  url         String?
  position    Int
  isPublished Boolean @default(false)

  Chapter   Chapter? @relation(fields: [chapterId], references: [id])
  chapterId String?

  @@index([chapterId])
}

model Quiz {
  id String @id @default(uuid())

  title       String
  questions   Question[]
  isPublished Boolean    @default(false)
  position    Int

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}

model Question {
  id       String @id @default(uuid())
  question String
  answer   String
  options  Json

  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)
  lastVideoId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Applications {
  id     String @id @default(uuid())
  userId String
  
  batchId String
  batch   Batch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  name           String
  email          String
  phone          String
  heard          String
  curr_role      String
  career         String
  public_profile String
  profession     String
  questions      String
  status         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, batchId])
  @@index([batchId])

}
